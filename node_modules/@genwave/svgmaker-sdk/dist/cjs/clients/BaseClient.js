"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const CustomErrors_1 = require("../errors/CustomErrors");
/**
 * Base client for API endpoints
 * Provides common functionality for all API clients
 */
class BaseClient {
    /**
     * Create a new base client
     * @param client Parent SVGMaker client
     */
    constructor(client) {
        this.client = client;
        this.httpClient = client.getHttpClient();
        this.config = client.getConfig();
        this.logger = client.getLogger();
    }
    /**
     * Validate request data against a schema
     * @param data Data to validate
     * @param schema Zod schema to validate against
     * @throws {ValidationError} If validation fails
     */
    validateRequest(data, schema) {
        this.logger.debug('Validating request parameters', { data });
        const result = schema.safeParse(data);
        if (!result.success) {
            const { issues } = result.error;
            const errorMessages = issues
                .map(issue => `${issue.path.join('.')}: ${issue.message}`)
                .join(', ');
            this.logger.error('Request validation failed', { errors: errorMessages });
            throw new CustomErrors_1.ValidationError(`Validation failed: ${errorMessages}`);
        }
        this.logger.debug('Request validation passed');
    }
    /**
     * Handle an API request with retries, rate limiting, and caching
     * @param url Request URL
     * @param options Request options
     * @returns Response data
     */
    async handleRequest(url, options = {}) {
        this.logger.debug(`Making API request to ${url}`, { method: options.method || 'GET' });
        try {
            // Apply request interceptors
            if (options instanceof Request) {
                options = (await this.client.applyRequestInterceptors(options));
            }
            // Make the request
            const response = await this.httpClient.request(url, options);
            this.logger.debug(`API request completed successfully`, {
                url,
                method: options.method || 'GET',
            });
            // Apply response interceptors
            return await this.client.applyResponseInterceptors(response);
        }
        catch (error) {
            this.logger.error(`API request failed`, {
                url,
                method: options.method || 'GET',
                error: error instanceof Error ? error.message : String(error),
            });
            throw error;
        }
    }
    /**
     * Copy client properties to a new instance
     * @param target Target instance
     */
    copyTo(target) {
        target.client = this.client;
        target.httpClient = this.httpClient;
        target.config = this.config;
        target.logger = this.logger;
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=BaseClient.js.map