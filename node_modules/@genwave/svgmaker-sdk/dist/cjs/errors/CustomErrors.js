"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileFormatError = exports.FileSizeError = exports.ContentSafetyError = exports.NetworkError = exports.TimeoutError = exports.InsufficientCreditsError = exports.AuthError = exports.RateLimitError = exports.APIError = exports.ValidationError = exports.SVGMakerError = void 0;
/**
 * Base error class for SVGMaker SDK
 */
class SVGMakerError extends Error {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message);
        this.name = 'SVGMakerError';
        Object.setPrototypeOf(this, SVGMakerError.prototype);
    }
}
exports.SVGMakerError = SVGMakerError;
/**
 * Error for validation failures
 */
class ValidationError extends SVGMakerError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message);
        this.name = 'ValidationError';
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
}
exports.ValidationError = ValidationError;
/**
 * Error for API response errors
 */
class APIError extends SVGMakerError {
    /**
     * @param message Error message
     * @param statusCode HTTP status code
     * @param code Error code
     * @param details Error details
     */
    constructor(message, statusCode, code, details) {
        super(message);
        this.name = 'APIError';
        this.statusCode = statusCode;
        this.code = code;
        this.details = details;
        Object.setPrototypeOf(this, APIError.prototype);
    }
}
exports.APIError = APIError;
/**
 * Error for rate limiting issues
 */
class RateLimitError extends APIError {
    /**
     * @param message Error message
     * @param retryAfter Time in seconds to wait before retrying
     */
    constructor(message, retryAfter) {
        super(message, 429);
        this.name = 'RateLimitError';
        this.retryAfter = retryAfter;
        Object.setPrototypeOf(this, RateLimitError.prototype);
    }
}
exports.RateLimitError = RateLimitError;
/**
 * Error for authorization issues
 */
class AuthError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 401);
        this.name = 'AuthError';
        Object.setPrototypeOf(this, AuthError.prototype);
    }
}
exports.AuthError = AuthError;
/**
 * Error for insufficient credits
 */
class InsufficientCreditsError extends APIError {
    /**
     * @param message Error message
     * @param creditsRequired Number of credits required
     */
    constructor(message, creditsRequired) {
        super(message, 402);
        this.name = 'InsufficientCreditsError';
        this.creditsRequired = creditsRequired;
        Object.setPrototypeOf(this, InsufficientCreditsError.prototype);
    }
}
exports.InsufficientCreditsError = InsufficientCreditsError;
/**
 * Error for timeout issues
 */
class TimeoutError extends SVGMakerError {
    /**
     * @param message Error message
     * @param timeout Request timeout in milliseconds
     */
    constructor(message, timeout) {
        super(message);
        this.name = 'TimeoutError';
        this.timeout = timeout;
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
exports.TimeoutError = TimeoutError;
/**
 * Error for network issues
 */
class NetworkError extends SVGMakerError {
    /**
     * @param message Error message
     * @param originalError Original error
     */
    constructor(message, originalError) {
        super(message);
        this.name = 'NetworkError';
        this.originalError = originalError;
        Object.setPrototypeOf(this, NetworkError.prototype);
    }
}
exports.NetworkError = NetworkError;
/**
 * Error for content safety issues
 */
class ContentSafetyError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 400, 'content_safety');
        this.name = 'ContentSafetyError';
        Object.setPrototypeOf(this, ContentSafetyError.prototype);
    }
}
exports.ContentSafetyError = ContentSafetyError;
/**
 * Error for file size issues
 */
class FileSizeError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 413);
        this.name = 'FileSizeError';
        Object.setPrototypeOf(this, FileSizeError.prototype);
    }
}
exports.FileSizeError = FileSizeError;
/**
 * Error for file format issues
 */
class FileFormatError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 400);
        this.name = 'FileFormatError';
        Object.setPrototypeOf(this, FileFormatError.prototype);
    }
}
exports.FileFormatError = FileFormatError;
//# sourceMappingURL=CustomErrors.js.map