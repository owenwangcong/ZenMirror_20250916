/**
 * Base error class for SVGMaker SDK
 */
export class SVGMakerError extends Error {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message);
        this.name = 'SVGMakerError';
        Object.setPrototypeOf(this, SVGMakerError.prototype);
    }
}
/**
 * Error for validation failures
 */
export class ValidationError extends SVGMakerError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message);
        this.name = 'ValidationError';
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
}
/**
 * Error for API response errors
 */
export class APIError extends SVGMakerError {
    /**
     * @param message Error message
     * @param statusCode HTTP status code
     * @param code Error code
     * @param details Error details
     */
    constructor(message, statusCode, code, details) {
        super(message);
        this.name = 'APIError';
        this.statusCode = statusCode;
        this.code = code;
        this.details = details;
        Object.setPrototypeOf(this, APIError.prototype);
    }
}
/**
 * Error for rate limiting issues
 */
export class RateLimitError extends APIError {
    /**
     * @param message Error message
     * @param retryAfter Time in seconds to wait before retrying
     */
    constructor(message, retryAfter) {
        super(message, 429);
        this.name = 'RateLimitError';
        this.retryAfter = retryAfter;
        Object.setPrototypeOf(this, RateLimitError.prototype);
    }
}
/**
 * Error for authorization issues
 */
export class AuthError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 401);
        this.name = 'AuthError';
        Object.setPrototypeOf(this, AuthError.prototype);
    }
}
/**
 * Error for insufficient credits
 */
export class InsufficientCreditsError extends APIError {
    /**
     * @param message Error message
     * @param creditsRequired Number of credits required
     */
    constructor(message, creditsRequired) {
        super(message, 402);
        this.name = 'InsufficientCreditsError';
        this.creditsRequired = creditsRequired;
        Object.setPrototypeOf(this, InsufficientCreditsError.prototype);
    }
}
/**
 * Error for timeout issues
 */
export class TimeoutError extends SVGMakerError {
    /**
     * @param message Error message
     * @param timeout Request timeout in milliseconds
     */
    constructor(message, timeout) {
        super(message);
        this.name = 'TimeoutError';
        this.timeout = timeout;
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
/**
 * Error for network issues
 */
export class NetworkError extends SVGMakerError {
    /**
     * @param message Error message
     * @param originalError Original error
     */
    constructor(message, originalError) {
        super(message);
        this.name = 'NetworkError';
        this.originalError = originalError;
        Object.setPrototypeOf(this, NetworkError.prototype);
    }
}
/**
 * Error for content safety issues
 */
export class ContentSafetyError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 400, 'content_safety');
        this.name = 'ContentSafetyError';
        Object.setPrototypeOf(this, ContentSafetyError.prototype);
    }
}
/**
 * Error for file size issues
 */
export class FileSizeError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 413);
        this.name = 'FileSizeError';
        Object.setPrototypeOf(this, FileSizeError.prototype);
    }
}
/**
 * Error for file format issues
 */
export class FileFormatError extends APIError {
    /**
     * @param message Error message
     */
    constructor(message) {
        super(message, 400);
        this.name = 'FileFormatError';
        Object.setPrototypeOf(this, FileFormatError.prototype);
    }
}
//# sourceMappingURL=CustomErrors.js.map