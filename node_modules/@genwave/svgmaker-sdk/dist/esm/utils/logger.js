const LOG_LEVELS = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3,
};
/**
 * Logger class for SVGMaker SDK
 */
export class Logger {
    constructor(config) {
        this.config = config;
    }
    /**
     * Log a debug message
     * @param message Message to log
     * @param args Additional arguments
     */
    debug(message, ...args) {
        this.log('debug', message, ...args);
    }
    /**
     * Log an info message
     * @param message Message to log
     * @param args Additional arguments
     */
    info(message, ...args) {
        this.log('info', message, ...args);
    }
    /**
     * Log a warning message
     * @param message Message to log
     * @param args Additional arguments
     */
    warn(message, ...args) {
        this.log('warn', message, ...args);
    }
    /**
     * Log an error message
     * @param message Message to log
     * @param args Additional arguments
     */
    error(message, ...args) {
        this.log('error', message, ...args);
    }
    /**
     * Log a message at the specified level
     * @param level Log level
     * @param message Message to log
     * @param args Additional arguments
     */
    log(level, message, ...args) {
        if (!this.config.logging || !this.shouldLog(level)) {
            return;
        }
        const timestamp = new Date().toISOString();
        const prefix = `[SVGMaker SDK][${timestamp}][${level.toUpperCase()}]`;
        if (args.length > 0) {
            console[level](`${prefix} ${message}`, ...args);
        }
        else {
            console[level](`${prefix} ${message}`);
        }
    }
    /**
     * Check if a message at the given level should be logged
     * @param level Log level to check
     * @returns True if the message should be logged
     */
    shouldLog(level) {
        const configLevel = LOG_LEVELS[this.config.logLevel];
        const messageLevel = LOG_LEVELS[level];
        return messageLevel >= configLevel;
    }
}
/**
 * Create a logger instance
 * @param config SDK configuration
 * @returns Logger instance
 */
export function createLogger(config) {
    return new Logger(config);
}
//# sourceMappingURL=logger.js.map