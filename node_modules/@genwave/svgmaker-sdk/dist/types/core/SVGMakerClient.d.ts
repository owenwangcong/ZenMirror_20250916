import { SVGMakerConfig } from '../types/config';
import { HttpClient } from '../utils/httpClient';
import { GenerateClient } from '../clients/GenerateClient';
import { EditClient } from '../clients/EditClient';
import { ConvertClient } from '../clients/ConvertClient';
import { Logger } from '../utils/logger';
/**
 * Request interceptor function type
 */
export type RequestInterceptor = (request: Request) => Request | Promise<Request>;
/**
 * Response interceptor function type
 */
export type ResponseInterceptor = <T>(response: T) => T | Promise<T>;
/**
 * Main SVGMaker client
 */
export declare class SVGMakerClient {
    /**
     * The current SDK configuration
     */
    private config;
    /**
     * HTTP client for making API requests
     */
    private httpClient;
    /**
     * Request interceptors
     */
    private requestInterceptors;
    /**
     * Response interceptors
     */
    private responseInterceptors;
    /**
     * Logger instance
     */
    private logger;
    /**
     * Generate SVG client
     */
    readonly generate: GenerateClient;
    /**
     * Edit SVG/Image client
     */
    readonly edit: EditClient;
    /**
     * Convert Image to SVG client
     */
    readonly convert: ConvertClient;
    /**
     * Create a new SVGMaker client
     * @param apiKey API key for authentication
     * @param config Additional configuration options
     */
    constructor(apiKey: string, config?: Partial<SVGMakerConfig>);
    /**
     * Wrap request method with retry and rate limiting
     * @param request Original request method
     * @returns Wrapped request method
     */
    private wrapRequestWithRetryAndRateLimit;
    /**
     * Get the current configuration
     * @returns Current configuration
     */
    getConfig(): SVGMakerConfig;
    /**
     * Update the client configuration
     * @param config Configuration options to update
     * @returns This client instance for chaining
     */
    setConfig(config: Partial<SVGMakerConfig>): SVGMakerClient;
    /**
     * Get the HTTP client
     * @returns HTTP client
     */
    getHttpClient(): HttpClient;
    /**
     * Add a request interceptor
     * @param interceptor Request interceptor function
     * @returns This client instance for chaining
     */
    addRequestInterceptor(interceptor: RequestInterceptor): SVGMakerClient;
    /**
     * Add a response interceptor
     * @param interceptor Response interceptor function
     * @returns This client instance for chaining
     */
    addResponseInterceptor(interceptor: ResponseInterceptor): SVGMakerClient;
    /**
     * Apply request interceptors to a request
     * @param request Request to intercept
     * @returns Modified request
     */
    applyRequestInterceptors(request: Request): Promise<Request>;
    /**
     * Apply response interceptors to a response
     * @param response Response to intercept
     * @returns Modified response
     */
    applyResponseInterceptors<T>(response: T): Promise<T>;
    /**
     * Built-in response interceptor to decode base64 PNG images
     * @param response Response to process
     * @returns Response with decoded image data
     */
    private decodeBase64Images;
    /**
     * Get the logger instance
     * @returns Logger instance
     */
    getLogger(): Logger;
}
//# sourceMappingURL=SVGMakerClient.d.ts.map