import { SVGMakerClient } from '../core/SVGMakerClient';
import { HttpClient, RequestOptions } from '../utils/httpClient';
import { SVGMakerConfig } from '../types/config';
import { Logger } from '../utils/logger';
import { z } from 'zod';
/**
 * Base client for API endpoints
 * Provides common functionality for all API clients
 */
export declare abstract class BaseClient {
    /**
     * Parent SVGMaker client
     */
    protected client: SVGMakerClient;
    /**
     * HTTP client for making API requests
     */
    protected httpClient: HttpClient;
    /**
     * Current SDK configuration
     */
    protected config: SVGMakerConfig;
    /**
     * Logger instance
     */
    protected logger: Logger;
    /**
     * Create a new base client
     * @param client Parent SVGMaker client
     */
    constructor(client: SVGMakerClient);
    /**
     * Validate request data against a schema
     * @param data Data to validate
     * @param schema Zod schema to validate against
     * @throws {ValidationError} If validation fails
     */
    protected validateRequest<T>(data: T, schema: z.ZodType<T>): void;
    /**
     * Handle an API request with retries, rate limiting, and caching
     * @param url Request URL
     * @param options Request options
     * @returns Response data
     */
    protected handleRequest<T>(url: string, options?: RequestOptions): Promise<T>;
    /**
     * Create a new instance of this client
     * This should be implemented by child classes to support method chaining
     * @returns New client instance
     */
    protected abstract clone(): BaseClient;
    /**
     * Copy client properties to a new instance
     * @param target Target instance
     */
    protected copyTo(target: BaseClient): void;
}
//# sourceMappingURL=BaseClient.d.ts.map