---
interface Props {
  title?: string;
  subtitle?: string;
}

const {
  title = "Breathing Pattern Optimization",
  subtitle = "Watch how your breathing rate naturally decreases during meditation"
} = Astro.props;
---

<div class="chart-container bg-gradient-to-br from-blue-50 to-zen-cream rounded-2xl p-6 md:p-8 shadow-zen-lg">
  <div class="mb-6">
    <h3 class="text-2xl md:text-3xl font-semibold text-zen-forest-medium mb-2">
      {title}
    </h3>
    <p class="text-sm md:text-base text-zen-gray-dark">
      {subtitle}
    </p>
  </div>

  <div id="breathing-chart" class="w-full h-64 md:h-80"></div>

  <div class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 text-center text-sm">
    <div class="p-3 bg-white rounded-lg shadow-zen">
      <div class="text-xl font-bold text-red-600">14</div>
      <div class="text-xs text-zen-gray-dark mt-1">Start (bpm)</div>
    </div>
    <div class="p-3 bg-white rounded-lg shadow-zen">
      <div class="text-xl font-bold text-yellow-600">8</div>
      <div class="text-xs text-zen-gray-dark mt-1">5 min (bpm)</div>
    </div>
    <div class="p-3 bg-white rounded-lg shadow-zen">
      <div class="text-xl font-bold text-green-600">6</div>
      <div class="text-xs text-zen-gray-dark mt-1">10 min (bpm)</div>
    </div>
    <div class="p-3 bg-white rounded-lg shadow-zen">
      <div class="text-xl font-bold text-zen-forest-medium">6</div>
      <div class="text-xs text-zen-gray-dark mt-1">Optimal</div>
    </div>
  </div>

  <div class="mt-4 p-4 bg-zen-orange-light/20 rounded-lg border-l-4 border-zen-orange-accent">
    <p class="text-sm text-zen-charcoal">
      <strong>Scientific Insight:</strong> A breathing rate of 5-6 breaths per minute maximizes heart rate variability (HRV)
      and activates the parasympathetic nervous system, promoting deep relaxation.
    </p>
  </div>
</div>

<script>
  import * as d3 from 'd3';

  const data = [
    { time: 0, phase: 0, rate: 14 },
    { time: 2, phase: 1, rate: 12 },
    { time: 4, phase: 0.8, rate: 10 },
    { time: 6, phase: -0.2, rate: 8 },
    { time: 8, phase: -1, rate: 7 },
    { time: 10, phase: -0.8, rate: 6.5 },
    { time: 12, phase: 0, rate: 6 },
    { time: 14, phase: 0.8, rate: 6 },
    { time: 16, phase: 1, rate: 6 },
    { time: 18, phase: 0.5, rate: 6 },
    { time: 20, phase: -0.5, rate: 6 }
  ];

  const container = document.getElementById('breathing-chart');
  if (!container) throw new Error('Chart container not found');

  const margin = { top: 20, right: 100, bottom: 50, left: 60 };
  const width = container.clientWidth - margin.left - margin.right;
  const height = container.clientHeight - margin.top - margin.bottom;

  const svg = d3.select('#breathing-chart')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  // Scales
  const x = d3.scaleLinear()
    .domain([0, 20])
    .range([0, width]);

  const yPhase = d3.scaleLinear()
    .domain([-1.5, 1.5])
    .range([height, 0]);

  const yRate = d3.scaleLinear()
    .domain([0, 16])
    .range([height, 0]);

  // Gradient for breathing wave
  const gradient = svg.append('defs')
    .append('linearGradient')
    .attr('id', 'breathing-gradient')
    .attr('x1', '0%')
    .attr('x2', '100%')
    .attr('y1', '0%')
    .attr('y2', '0%');

  gradient.append('stop')
    .attr('offset', '0%')
    .attr('stop-color', '#3b82f6')
    .attr('stop-opacity', 0.8);

  gradient.append('stop')
    .attr('offset', '50%')
    .attr('stop-color', '#2d5b3e')
    .attr('stop-opacity', 0.6);

  gradient.append('stop')
    .attr('offset', '100%')
    .attr('stop-color', '#22c55e')
    .attr('stop-opacity', 0.8);

  // Area generator for breathing wave
  const area = d3.area<typeof data[0]>()
    .x(d => x(d.time))
    .y0(yPhase(0))
    .y1(d => yPhase(d.phase))
    .curve(d3.curveCatmullRom);

  // Line generator for breathing wave
  const waveLine = d3.line<typeof data[0]>()
    .x(d => x(d.time))
    .y(d => yPhase(d.phase))
    .curve(d3.curveCatmullRom);

  // Line generator for rate
  const rateLine = d3.line<typeof data[0]>()
    .x(d => x(d.time))
    .y(d => yRate(d.rate))
    .curve(d3.curveMonotoneX);

  // Draw area under wave
  svg.append('path')
    .datum(data)
    .attr('fill', 'url(#breathing-gradient)')
    .attr('opacity', 0.3)
    .attr('d', area);

  // Draw breathing wave
  svg.append('path')
    .datum(data)
    .attr('fill', 'none')
    .attr('stroke', 'url(#breathing-gradient)')
    .attr('stroke-width', 3)
    .attr('d', waveLine);

  // Draw rate line
  svg.append('path')
    .datum(data)
    .attr('fill', 'none')
    .attr('stroke', '#d97a34')
    .attr('stroke-width', 2)
    .attr('stroke-dasharray', '5,5')
    .attr('d', rateLine)
    .attr('opacity', 0.7);

  // Draw axes
  svg.append('g')
    .attr('transform', `translate(0,${height})`)
    .call(d3.axisBottom(x).ticks(10).tickFormat(d => `${d}min`))
    .style('color', '#2d5b3e')
    .selectAll('text')
    .style('font-size', '11px');

  svg.append('g')
    .call(d3.axisLeft(yPhase).ticks(5))
    .style('color', '#2d5b3e')
    .selectAll('text')
    .style('font-size', '11px');

  // Right axis for rate
  svg.append('g')
    .attr('transform', `translate(${width},0)`)
    .call(d3.axisRight(yRate).ticks(5))
    .style('color', '#d97a34')
    .selectAll('text')
    .style('font-size', '11px');

  // Add labels
  svg.append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', 0 - margin.left)
    .attr('x', 0 - (height / 2))
    .attr('dy', '1em')
    .style('text-anchor', 'middle')
    .style('font-size', '13px')
    .style('fill', '#2d5b3e')
    .text('Breathing Phase');

  svg.append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', width + margin.right - 20)
    .attr('x', 0 - (height / 2))
    .attr('dy', '1em')
    .style('text-anchor', 'middle')
    .style('font-size', '13px')
    .style('fill', '#d97a34')
    .text('Breaths/Min');

  svg.append('text')
    .attr('x', width / 2)
    .attr('y', height + margin.bottom - 10)
    .attr('text-anchor', 'middle')
    .style('font-size', '13px')
    .style('fill', '#2d5b3e')
    .text('Meditation Duration');

  // Add optimal zone indicator
  svg.append('rect')
    .attr('x', x(10))
    .attr('y', 0)
    .attr('width', x(20) - x(10))
    .attr('height', height)
    .attr('fill', '#22c55e')
    .attr('opacity', 0.1);

  svg.append('text')
    .attr('x', x(15))
    .attr('y', 15)
    .attr('text-anchor', 'middle')
    .style('font-size', '12px')
    .style('fill', '#22c55e')
    .style('font-weight', 'bold')
    .text('Optimal Zone');

  // Animate breathing (optional)
  const animateBreathing = () => {
    const circle = svg.append('circle')
      .attr('cx', x(0))
      .attr('cy', yPhase(0))
      .attr('r', 6)
      .attr('fill', '#d97a34')
      .attr('stroke', 'white')
      .attr('stroke-width', 2);

    const path = svg.select('path[stroke="url(#breathing-gradient)"]').node() as SVGPathElement;
    if (!path) return;

    const pathLength = path.getTotalLength();

    const animate = () => {
      circle
        .attr('cx', x(0))
        .attr('cy', yPhase(0))
        .transition()
        .duration(20000)
        .ease(d3.easeLinear)
        .attrTween('transform', () => {
          return (t: number) => {
            const point = path.getPointAtLength(t * pathLength);
            return `translate(${point.x - x(0)},${point.y - yPhase(0)})`;
          };
        })
        .on('end', animate);
    };

    animate();
  };

  setTimeout(animateBreathing, 500);
</script>

<style>
  .chart-container {
    max-width: 1000px;
    margin: 0 auto;
  }
</style>
